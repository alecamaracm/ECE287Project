
//--  This file was automatically generated by the PowerPoint2Verilog compiler. Please do not change anything and use the compiler instead --//

module PP2VerilogDrawingController(CLOCK,reset,animationCLOCK,wasd,arrows,xPixel,yPixel,VGAr,VGAg,VGAb,mouseX,mouseY,peterX,peterY,colgeniuses);

input CLOCK;
input animationCLOCK;
input [3:0]wasd;
input [3:0]arrows;
input [9:0]xPixel;
input[8:0]yPixel;
input [10:0]mouseX;
input [10:0]mouseY;
output [7:0]VGAr;
output [7:0]VGAg;
output [7:0]VGAb;
reg [7:0]VGAr;
reg [7:0]VGAg;
reg [7:0]VGAb;
reg [15:0]buffer;
input reset;
output colgeniuses;
input [9:0]peterX;
input [9:0]peterY;

always @(*)
begin

	//Writing backgound color
	VGAr = 8'b11111111;
	VGAg = 8'b11111111; 
	VGAb = 8'b11111111; 

	if(yPixel>=timesTableY && yPixel<timesTableY+(179*2) && xPixel>=timesTableX && xPixel<timesTableX+(327*2))
	begin
		VGAr=timesTableq[14:10]*8;
		VGAg=timesTableq[9:5]*8;
		VGAb=timesTableq[4:0]*8;
	end

	if(yPixel>=einsteinY && yPixel<einsteinY+(156*1) && xPixel>=einsteinX && xPixel<einsteinX+(139*1))
	begin
		VGAr=einsteinq[14:10]*8;
		VGAg=einsteinq[9:5]*8;
		VGAb=einsteinq[4:0]*8;
	end

	//Drawing Solid shape "Basictransparency"
	//   --> Allowed 50% transparent render
	if(xPixel>BasictransparencyX && xPixel<BasictransparencyX+130 && yPixel>BasictransparencyY && yPixel<BasictransparencyY+68)
	begin
		VGAr = (8'b01110000 + VGAr) / 2;
		VGAg = (8'b10101101 + VGAg) / 2;
		VGAb = (8'b01000111 + VGAb) / 2;
		if(xPixel<BasictransparencyX+3 || xPixel>BasictransparencyX+127 || yPixel<BasictransparencyY+3 || yPixel>BasictransparencyY+65)    //Drawing border
		begin
			VGAr = 8'b11110100;
			VGAg = 8'b10110001;
			VGAb = 8'b10000011;
		end
	end

	if(yPixel>=peterY && yPixel<peterY+(156*1) && xPixel>=peterX && xPixel<peterX+(156*1))
	begin
		VGAr=peterq[14:10]*8;
		VGAg=peterq[9:5]*8;
		VGAb=peterq[4:0]*8;
	end

	if(yPixel>=bouncerY && yPixel<bouncerY+(171*1) && xPixel>=bouncerX && xPixel<bouncerX+(303*1))
	begin
		VGAr=(VGAr+bouncerq[14:10]*8)/2;
		VGAg=(VGAg+bouncerq[9:5]*8)/2;
		VGAb=(VGAb+bouncerq[4:0]*8)/2;
	end

end

wire [9:0]einsteinX;
wire [9:0]einsteinY;
wire [9:0]BasictransparencyX;
wire [9:0]BasictransparencyY;
wire [9:0]bouncerX;
wire [9:0]bouncerY;


animations anim1(animationCLOCK,reset,wasd,arrows,BasictransparencyX,BasictransparencyY,bouncerX,bouncerY,einsteinX,einsteinY);
collsMod mod(colgeniuses,einsteinX,einsteinY,peterX,peterY,bouncerX,bouncerY);
wire [14:0]timesTableq;
ramtimesTable timesTableram((((yPixel-timesTableY)/2)*327 +((xPixel-timesTableX)/2)+1),CLOCK,15'd0,0,timesTableq);
wire [14:0]einsteinq;
rameinstein einsteinram((((yPixel-einsteinY)/1)*139 +((xPixel-einsteinX)/1)+1),CLOCK,15'd0,0,einsteinq);
wire [14:0]peterq;
rampeter peterram((((yPixel-peterY)/1)*156 +((xPixel-peterX)/1)+1),CLOCK,15'd0,0,peterq);
wire [14:0]bouncerq;
rambouncer bouncerram((((yPixel-bouncerY)/1)*303 +((xPixel-bouncerX)/1)+1),CLOCK,15'd0,0,bouncerq);

endmodule

module animations(animationCLOCK,reset,wasd,arrows,BasictransparencyX,BasictransparencyY,bouncerX,bouncerY,einsteinX,einsteinY);

input reset;
output [9:0]einsteinX;
reg [9:0]einsteinX;
output [9:0]einsteinY;
reg [9:0]einsteinY;
output [9:0]BasictransparencyX;
reg [9:0]BasictransparencyX;
reg BasictransparencyXDir;
output [9:0]BasictransparencyY;
reg [9:0]BasictransparencyY;
reg BasictransparencyYDir;
output [9:0]bouncerX;
reg [9:0]bouncerX;
reg bouncerXDir;
output [9:0]bouncerY;
reg [9:0]bouncerY;
reg bouncerYDir;
input animationCLOCK;
input [3:0]arrows;
input [3:0]wasd;
reg initilized;

always @ (posedge animationCLOCK)
begin

	if(reset==0 || initilized==0)
	begin
		initilized=1;
		einsteinX=84;
		einsteinY=295;
		BasictransparencyX=12;
		BasictransparencyY=190;
		bouncerX=223;
		bouncerY=34;
		einsteinX=84;
		einsteinY=295;
		BasictransparencyX=12;
		BasictransparencyY=190;
		bouncerX=223;
		bouncerY=34;
		einsteinX=84;
		einsteinY=295;
		BasictransparencyX=12;
		BasictransparencyY=190;
		bouncerX=223;
		bouncerY=34;
		einsteinX=84;
		einsteinY=295;
		BasictransparencyX=12;
		BasictransparencyY=190;
		bouncerX=223;
		bouncerY=34;
	end

	//Writing WASD movement for einsteinX:
	if(wasd[1]==1 && einsteinX>0) einsteinX=einsteinX-15;
	if (wasd[3] == 1 && einsteinX < 640 - 139) einsteinX = einsteinX + 15;
	if(wasd[0]==1 && einsteinY>0) einsteinY=einsteinY-15;
	if(wasd[2]==1 && einsteinY<480-156) einsteinY=einsteinY+15;


	//Writing Bouncing movement for BasictransparencyX:
	if(BasictransparencyXDir==1)
	begin
		if (BasictransparencyX >= 640 - 130)
		begin
			BasictransparencyXDir = 0;
		end
		else
		begin
			BasictransparencyX <= BasictransparencyX + 10;
		end
	end
	else
	begin
		if (BasictransparencyX <= 0)
		begin
			BasictransparencyXDir = 1;
		end
		else
		begin
			BasictransparencyX <= BasictransparencyX - 10;
		end
	end
	if(BasictransparencyYDir==1)
	begin
		if (BasictransparencyY >= 480 - 68)
		begin
			BasictransparencyYDir = 0;
		end
		else
		begin
			BasictransparencyY <= BasictransparencyY + 10;
		end
	end
	else
	begin
		if (BasictransparencyY <= 0)
		begin
			BasictransparencyYDir = 1;
		end
		else
		begin
			BasictransparencyY <= BasictransparencyY - 10;
		end
	end
	//Writing Bouncing movement for bouncerX:
	if(bouncerXDir==1)
	begin
		if (bouncerX >= 540 - 303)
		begin
			bouncerXDir = 100;
		end
		else
		begin
			bouncerX <= bouncerX + 1;
		end
	end
	else
	begin
		if (bouncerX <= 100)
		begin
			bouncerXDir = 1;
		end
		else
		begin
			bouncerX <= bouncerX - 1;
		end
	end
	if(bouncerYDir==1)
	begin
		if (bouncerY >= 380 - 171)
		begin
			bouncerYDir = 100;
		end
		else
		begin
			bouncerY <= bouncerY + 1;
		end
	end
	else
	begin
		if (bouncerY <= 100)
		begin
			bouncerYDir = 1;
		end
		else
		begin
			bouncerY <= bouncerY - 1;
		end
	end
end

endmodule
module collsMod(colgeniuses,einsteinX,einsteinY,peterX,peterY,bouncerX,bouncerY);
	output colgeniuses;
	input [9:0]einsteinX;
	input [9:0]einsteinY;
	input [9:0]peterX;
	input [9:0]peterY;
	input [9:0]bouncerX;
	input [9:0]bouncerY;
	assign colgeniuses=((einsteinY+156>peterY) && (einsteinY<peterY+156) && (einsteinX+139>peterX) && (einsteinX<peterX+156))||((einsteinY+156>bouncerY) && (einsteinY<bouncerY+171) && (einsteinX+139>bouncerX) && (einsteinX<bouncerX+303))||((peterY+156>bouncerY) && (peterY<bouncerY+171) && (peterX+156>bouncerX) && (peterX<bouncerX+303));
endmodule
