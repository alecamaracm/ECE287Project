
//--  This file was automatically generated by the PowerPoint2Verilog compiler. Please do not change anything and use the compiler instead --//

module PP2VerilogDrawingController(CLOCK,RX,animationCLOCK,wasd,arrows,xPixel,yPixel,VGAr,VGAg,VGAb,mouseX,mouseY,Basic_transparencyX,Basic_transparencyY,leds);

input CLOCK;
input RX;

input animationCLOCK;
input [3:0]wasd;
input [3:0]arrows;
input [9:0]xPixel;
input[8:0]yPixel;
input [10:0]mouseX;
input [10:0]mouseY;
output [7:0]VGAr;
output [7:0]VGAg;
output [7:0]VGAb;
reg [7:0]VGAr;
reg [7:0]VGAg;
reg [7:0]VGAb;
reg [15:0]buffer;
input [9:0]Basic_transparencyX;
input [9:0]Basic_transparencyY;

reg [7:0]leds;
output [7:0]leds;

always @(*)
begin

	//Writing backgound color
	VGAr = 8'b00011001;
	VGAg = 8'b00101101; 
	VGAb = 8'b00001010; 

	//Drawing Solid shape "Bottom properties"
	if(xPixel>53 && xPixel<639 && yPixel>385 && yPixel<479)
	begin
		VGAr = 8'b10000000;
		VGAg = 8'b10000000;
		VGAb = 8'b10000000;
		if(xPixel<54 || xPixel>638 || yPixel<386 || yPixel>478)    //Drawing border
		begin
			VGAr = 8'b00101111;
			VGAg = 8'b01010010;
			VGAb = 8'b10001111;
		end
	end

	//Drawing Solid shape "Random Orange box"
	if(xPixel>439 && xPixel<604 && yPixel>41 && yPixel<384)
	begin
		VGAr = 8'b11000101;
		VGAg = 8'b01011010;
		VGAb = 8'b00010001;
	end

	//Drawing Solid shape "High transparency"
	//   --> Allowed 50% transparent render
	if(xPixel>369 && xPixel<470 && yPixel>130 && yPixel<198)
	begin
		VGAr = (8'b01000000 + VGAr) / 2;
		VGAg = (8'b01000000 + VGAg) / 2;
		VGAb = (8'b01000000 + VGAb) / 2;
	end

	//Drawing Solid shape "Low transparency"
	//   --> Allowed 50% transparent render
	if(xPixel>369 && xPixel<470 && yPixel>25 && yPixel<93)
	begin
		VGAr = (8'b01010100 + VGAr) / 2;
		VGAg = (8'b10000010 + VGAg) / 2;
		VGAb = (8'b00110101 + VGAb) / 2;
	end

	//Drawing Solid shape "Left bar"
	if(xPixel>0 && xPixel<278 && yPixel>0 && yPixel<206)
	begin
		VGAr = 8'b11111111;
		VGAg = 8'b11011001;
		VGAb = 8'b01100110;
	end

	//Drawing Solid shape "Basic transparency"
	//   --> Allowed 50% transparent render
	if(xPixel>Basic_transparencyX && xPixel<Basic_transparencyX+388 && yPixel>Basic_transparencyY && yPixel<Basic_transparencyY+68)
	begin
		VGAr = (8'b01110000 + VGAr) / 2;
		VGAg = (8'b10101101 + VGAg) / 2;
		VGAb = (8'b01000111 + VGAb) / 2;
		if(xPixel<Basic_transparencyX+3 || xPixel>Basic_transparencyX+385 || yPixel<Basic_transparencyY+3 || yPixel>Basic_transparencyY+65)    //Drawing border
		begin
			VGAr = 8'b11110100;
			VGAg = 8'b10110001;
			VGAb = 8'b10000011;
		end
	end

	//Drawing Solid shape "WasdBlock"
	if(xPixel>150 && xPixel<305 && yPixel>255 && yPixel<337)
	begin
		VGAr = 8'b00000000;
		VGAg = 8'b01110000;
		VGAb = 8'b11000000;
		if(xPixel<152 || xPixel>303 || yPixel<257 || yPixel>335)    //Drawing border
		begin
			VGAr = 8'b11111111;
			VGAg = 8'b00000000;
			VGAb = 8'b00000000;
		end
	end

	//Drawing Solid shape "ArrowsBlock"
	//   --> Allowed 50% transparent render
	if(xPixel>ArrowsBlockX && xPixel<ArrowsBlockX+155 && yPixel>ArrowsBlockY && yPixel<ArrowsBlockY+82)
	begin
		VGAr = (8'b11111111 + VGAr) / 2;
		VGAg = (8'b11111111 + VGAg) / 2;
		VGAb = (8'b11111111 + VGAb) / 2;
		if(xPixel<ArrowsBlockX+2 || xPixel>ArrowsBlockX+153 || yPixel<ArrowsBlockY+2 || yPixel>ArrowsBlockY+80)    //Drawing border
		begin
			VGAr = (8'b01110000 + VGAr) / 2;
			VGAg = (8'b00110000 + VGAg) / 2;
			VGAb = (8'b10100000 + VGAb) / 2;
		end
	end

	
	if(sadEN==1'b1)
	begin
		if(yPixel>=sadY && yPixel<sadY+159 && xPixel>=sadX && xPixel<sadX+239) 
		begin			
			VGAr={SADq[4:0],3'b0};
			//VGAg={SADq[9:5],3'b0};
			//VGAb={SADq[14:10],3'b0};
			VGAg=0;
			VGAb=0;
			leds=SADq[7:0];
		end			
	end
	
	


end

wire [9:0]ArrowsBlockX;
wire [9:0]ArrowsBlockY;
wire [9:0]sadX;
wire [9:0]sadY;


animations anim1(animationCLOCK,wasd,arrows,ArrowsBlockX,ArrowsBlockY,sadX,sadY);

wire [7:0]uartDT;
wire uartDTavail;
reg lastuartDTavail;

reg [15:0]uartBuffer;
reg uartFull;

reg [19:0]currentPos;

wire sadEN;
wire [14:0]SADq;
reg SADwren;
reg [14:0]SADdata;
wire [15:0]SADaddress;
ramTEST sadram(SADaddress,CLOCK,SADdata,~sadEN,SADq);

assign sadEN=(currentPos>=20'd38001)?1'b1:1'b0;
assign SADaddress = (sadEN==1'b1) ? (yPixel-sadY)*(xPixel-sadX) : currentPos;

always @(posedge CLOCK)
begin
	
	
	
	if(uartDTavail!=lastuartDTavail)
	begin
		
		if(uartFull==1'b0)
		begin
		
			uartBuffer[15:8]=uartDT;
			uartFull=1'b1;
		end
		else
		begin
			uartBuffer[7:0]=uartDT;
			uartFull=1'b0;
			
			
			
			if(sadEN==1'b0)
			begin
				SADdata=uartBuffer[14:0];	
				//SADdata=15'b111111111111111;	
				
			end
			
			
			
			currentPos=currentPos+1'b1;
			
		end
		
		lastuartDTavail=uartDTavail;
	end
	

end


UART uart(CLOCK,RX,uartDT,uartDTavail);



endmodule



module animations(animationCLOCK,wasd,arrows,ArrowsBlockX,ArrowsBlockY,sadX,sadY);

output [9:0]ArrowsBlockX;
reg [9:0]ArrowsBlockX;
output [9:0]ArrowsBlockY;
reg [9:0]ArrowsBlockY;
output [9:0]sadX;
reg [9:0]sadX;
output [9:0]sadY;
reg [9:0]sadY;
input animationCLOCK;
input [3:0]arrows;
input [3:0]wasd;

always @ (posedge animationCLOCK)
begin
	//Writing WASD movement for sadX:
	if(wasd[1]==1 && sadX>0) sadX=sadX-1;
	if (wasd[3] == 1 && sadX < 640 - 239) sadX = sadX + 1;
	if(wasd[0]==1 && sadY>0) sadY=sadY-1;
	if(wasd[2]==1 && sadY<480-159) sadY=sadY+1;

	//Writing ARROWS movement for ArrowsBlockX:
	if(arrows[1]==1 && ArrowsBlockX>0) ArrowsBlockX=ArrowsBlockX-1;
	if (arrows[3] == 1 && ArrowsBlockX < 640 - 155) ArrowsBlockX = ArrowsBlockX + 1;
	if(arrows[0]==1 && ArrowsBlockY>0) ArrowsBlockY=ArrowsBlockY-1;
	if(arrows[2]==1 && ArrowsBlockY<480-82) ArrowsBlockY=ArrowsBlockY+1;
end

endmodule
