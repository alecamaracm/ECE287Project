
//--  This file was automatically generated by the PowerPoint2Verilog compiler. Please do not change anything and use the compiler instead --//

module PP2VerilogDrawingController(CLOCK,reset,animationCLOCK,wasd,arrows,xPixel,yPixel,VGAr,VGAg,VGAb,mouseX,mouseY,pointX,pointY,);

input CLOCK;
input animationCLOCK;
input [3:0]wasd;
input [3:0]arrows;
input [9:0]xPixel;
input[8:0]yPixel;
input [10:0]mouseX;
input [10:0]mouseY;
output [7:0]VGAr;
output [7:0]VGAg;
output [7:0]VGAb;
reg [7:0]VGAr;
reg [7:0]VGAg;
reg [7:0]VGAb;
input reset;
input [9:0]pointX;
input [9:0]                                                                                                                                                                                                                                ;

always @(*)
begin

	//Writing backgound color
	VGAr = 8'b11111111;
	VGAg = 8'b11111111; 
	VGAb = 8'b11111111; 

	if(yPixel>=PIPEDOWN1Y && yPixel<PIPEDOWN1Y+(201*2) && xPixel>=PIPEDOWN1X+1 && xPixel<PIPEDOWN1X+(33*2) && PIPEDOWN1q[15]==1'b1)
	begin
		VGAr=PIPEDOWN1q[14:10]*8;
		VGAg=PIPEDOWN1q[9:5]*8;
		VGAb=PIPEDOWN1q[4:0]*8;
	end

	if(yPixel>=PIPEDOWN2Y && yPixel<PIPEDOWN2Y+(201*2) && xPixel>=PIPEDOWN2X+1 && xPixel<PIPEDOWN2X+(33*2) && PIPEDOWN2q[15]==1'b1)
	begin
		VGAr=PIPEDOWN2q[14:10]*8;
		VGAg=PIPEDOWN2q[9:5]*8;
		VGAb=PIPEDOWN2q[4:0]*8;
	end

	if(yPixel>=PIPEDOWN3Y && yPixel<PIPEDOWN3Y+(201*2) && xPixel>=PIPEDOWN3X+1 && xPixel<PIPEDOWN3X+(33*2) && PIPEDOWN3q[15]==1'b1)
	begin
		VGAr=PIPEDOWN3q[14:10]*8;
		VGAg=PIPEDOWN3q[9:5]*8;
		VGAb=PIPEDOWN3q[4:0]*8;
	end

	//Drawing Solid shape "LEFTBOX"
	if(xPixel>=0 && xPixel<=118 && yPixel>=0 && yPixel<=480)
	begin
		VGAr = 8'b10100101;
		VGAg = 8'b10100101;
		VGAb = 8'b10100101;
		if(xPixel<3 || xPixel>115 || yPixel<3 || yPixel>477)    //Drawing border
		begin
			VGAr = 8'b00100010;
			VGAg = 8'b00101010;
			VGAb = 8'b00110101;
		end
	end

	if(yPixel>=pointY && yPixel<pointY+(48*1) && xPixel>=pointX+1 && xPixel<pointX+(32*1) && pointq[15]==1'b1)
	begin
		VGAr=pointq[14:10]*8;
		VGAg=pointq[9:5]*8;
		VGAb=pointq[4:0]*8;
	end

end

wire [9:0]PIPEDOWN2X;
wire [9:0]PIPEDOWN2Y;
wire [9:0]PIPEDOWN1X;
wire [9:0]PIPEDOWN1Y;
wire [9:0]PIPEDOWN3X;
wire [9:0]PIPEDOWN3Y;


animations anim1(animationCLOCK,reset,wasd,arrows,PIPEDOWN2X,PIPEDOWN2Y,PIPEDOWN1X,PIPEDOWN1Y,PIPEDOWN3X,PIPEDOWN3Y);
collsMod mod();
wire [15:0]PIPEDOWN1q;
ramPIPEDOWN1 PIPEDOWN1ram((((yPixel-PIPEDOWN1Y)/2)*33 +((xPixel-PIPEDOWN1X)/2)+1),CLOCK,16'd0,0,PIPEDOWN1q);
wire [15:0]PIPEDOWN2q;
ramPIPEDOWN2 PIPEDOWN2ram((((yPixel-PIPEDOWN2Y)/2)*33 +((xPixel-PIPEDOWN2X)/2)+1),CLOCK,16'd0,0,PIPEDOWN2q);
wire [15:0]PIPEDOWN3q;
ramPIPEDOWN3 PIPEDOWN3ram((((yPixel-PIPEDOWN3Y)/2)*33 +((xPixel-PIPEDOWN3X)/2)+1),CLOCK,16'd0,0,PIPEDOWN3q);
wire [15:0]pointq;
rampoint pointram((((yPixel-pointY)/1)*32 +((xPixel-pointX)/1)+1),CLOCK,16'd0,0,pointq);

endmodule

module animations(animationCLOCK,reset,wasd,arrows,PIPEDOWN2X,PIPEDOWN2Y,PIPEDOWN1X,PIPEDOWN1Y,PIPEDOWN3X,PIPEDOWN3Y);

input reset;
output [9:0]PIPEDOWN2X;
reg [9:0]PIPEDOWN2X;
output [9:0]PIPEDOWN2Y;
reg [9:0]PIPEDOWN2Y;
output [9:0]PIPEDOWN1X;
reg [9:0]PIPEDOWN1X;
output [9:0]PIPEDOWN1Y;
reg [9:0]PIPEDOWN1Y;
output [9:0]PIPEDOWN3X;
reg [9:0]PIPEDOWN3X;
output [9:0]PIPEDOWN3Y;
reg [9:0]PIPEDOWN3Y;
input animationCLOCK;
input [3:0]arrows;
input [3:0]wasd;
reg initilized;

initial begin
	PIPEDOWN1X=129;
	PIPEDOWN1Y=82;
	PIPEDOWN2X=277;
	PIPEDOWN2Y=82;
	PIPEDOWN3X=434;
	PIPEDOWN3Y=82;
	PIPEDOWN1X=129;
	PIPEDOWN1Y=82;
	PIPEDOWN2X=277;
	PIPEDOWN2Y=82;
	PIPEDOWN3X=434;
	PIPEDOWN3Y=82;
	PIPEDOWN1X=129;
	PIPEDOWN1Y=82;
	PIPEDOWN2X=277;
	PIPEDOWN2Y=82;
	PIPEDOWN3X=434;
	PIPEDOWN3Y=82;
	PIPEDOWN1X=129;
	PIPEDOWN1Y=82;
	PIPEDOWN2X=277;
	PIPEDOWN2Y=82;
	PIPEDOWN3X=434;
	PIPEDOWN3Y=82;
	PIPEDOWN1X=129;
	PIPEDOWN1Y=82;
	PIPEDOWN2X=277;
	PIPEDOWN2Y=82;
	PIPEDOWN3X=434;
	PIPEDOWN3Y=82;
	PIPEDOWN1X=129;
	PIPEDOWN1Y=82;
	PIPEDOWN2X=277;
	PIPEDOWN2Y=82;
	PIPEDOWN3X=434;
	PIPEDOWN3Y=82;
	PIPEDOWN1X=129;
	PIPEDOWN1Y=82;
	PIPEDOWN2X=277;
	PIPEDOWN2Y=82;
	PIPEDOWN3X=434;
	PIPEDOWN3Y=82;
end


always @ (posedge animationCLOCK)
begin
	//Writing WASD movement for PIPEDOWN1X:
	if(wasd[1]==1 && PIPEDOWN1X>0) PIPEDOWN1X=PIPEDOWN1X-1;
	if (wasd[3] == 1 && PIPEDOWN1X < 640 - 67) PIPEDOWN1X = PIPEDOWN1X + 1;
	if(wasd[0]==1 && PIPEDOWN1Y>0) PIPEDOWN1Y=PIPEDOWN1Y-1;
	if(wasd[2]==1 && PIPEDOWN1Y<480-402) PIPEDOWN1Y=PIPEDOWN1Y+1;
	//Writing WASD movement for PIPEDOWN3X:
	if(wasd[1]==1 && PIPEDOWN3X>0) PIPEDOWN3X=PIPEDOWN3X-1;
	if (wasd[3] == 1 && PIPEDOWN3X < 640 - 67) PIPEDOWN3X = PIPEDOWN3X + 1;
	if(wasd[0]==1 && PIPEDOWN3Y>0) PIPEDOWN3Y=PIPEDOWN3Y-1;
	if(wasd[2]==1 && PIPEDOWN3Y<480-402) PIPEDOWN3Y=PIPEDOWN3Y+1;

	//Writing ARROWS movement for PIPEDOWN2X:
	if(arrows[1]==1 && PIPEDOWN2X>0) PIPEDOWN2X=PIPEDOWN2X-1;
	if (arrows[3] == 1 && PIPEDOWN2X < 640 - 67) PIPEDOWN2X = PIPEDOWN2X + 1;
	if(arrows[0]==1 && PIPEDOWN2Y>0) PIPEDOWN2Y=PIPEDOWN2Y-1;
	if(arrows[2]==1 && PIPEDOWN2Y<480-402) PIPEDOWN2Y=PIPEDOWN2Y+1;

end

endmodule
module collsMod();
endmodule
