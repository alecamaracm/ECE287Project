
//--  This file was automatically generated by the PowerPoint2Verilog compiler. Please do not change anything and use the compiler instead --//

module PP2VerilogDrawingController(CLOCK,reset,animationCLOCK,wasd,arrows,xPixel,yPixel,VGAr,VGAg,VGAb,mouseX,mouseY,BACK2X,BACK2Y,BACK1X,BACK1Y,PIPEDOWN1X,PIPEDOWN1Y,PIPEDOWN2X,PIPEDOWN2Y,PIPEDOWN3X,PIPEDOWN3Y,pointX,pointY,PIPEUP1X,PIPEUP1Y,PIPEUP2X,PIPEUP2Y,PIPEUP3X,PIPEUP3Y,birdX,birdY,coltuberias,PIPEDOWN1VISIBLE,PIPEDOWN2VISIBLE,PIPEDOWN3VISIBLE,PIPEUP1SKIPY,PIPEUP1VISIBLE,PIPEUP2SKIPY,PIPEUP2VISIBLE,PIPEUP3SKIPY,PIPEUP3VISIBLE,cloud1sp,birdsp,BACK2SKIPX,BACK1SKIPX,);

input CLOCK;
input animationCLOCK;
input [3:0]wasd;
input [3:0]arrows;
input [9:0]xPixel;
input[8:0]yPixel;
input [10:0]mouseX;
input [10:0]mouseY;
output [7:0]VGAr;
output [7:0]VGAg;
output [7:0]VGAb;
reg [7:0]VGAr;
reg [7:0]VGAg;
reg [7:0]VGAb;
input reset;
input [9:0]PIPEDOWN1VISIBLE;
input [9:0]PIPEDOWN2VISIBLE;
input [9:0]PIPEDOWN3VISIBLE;
input [9:0]PIPEUP1SKIPY;
input [9:0]PIPEUP1VISIBLE;
input [9:0]PIPEUP2SKIPY;
input [9:0]PIPEUP2VISIBLE;
input [9:0]PIPEUP3SKIPY;
input [9:0]PIPEUP3VISIBLE;
input [9:0]cloud1sp;
input [9:0]birdsp;
input [9:0]BACK2SKIPX;
input [9:0]BACK1SKIPX;
output coltuberias;
input [9:0]BACK2X;
input [9:0]BACK2Y;
input [9:0]BACK1X;
input [9:0]BACK1Y;
input [9:0]PIPEDOWN1X;
input [9:0]PIPEDOWN1Y;
input [9:0]PIPEDOWN2X;
input [9:0]PIPEDOWN2Y;
input [9:0]PIPEDOWN3X;
input [9:0]PIPEDOWN3Y;
input [9:0]pointX;
input [9:0]pointY;
input [9:0]PIPEUP1X;
input [9:0]PIPEUP1Y;
input [9:0]PIPEUP2X;
input [9:0]PIPEUP2Y;
input [9:0]PIPEUP3X;
input [9:0]PIPEUP3Y;
input [9:0]birdX;
input [9:0]birdY;

always @(*)
begin

	//Writing backgound color
	VGAr = 8'b11111111;
	VGAg = 8'b11111111; 
	VGAb = 8'b11111111; 

	if(yPixel>=BACK2Y && yPixel<BACK2Y+(98*5) && xPixel>=BACK2X+1 && xPixel<BACK2X+(128*5-BACK2SKIPX) && BACK2q[15]==1'b1)
	begin
		VGAr=BACK2q[14:10]*8;
		VGAg=BACK2q[9:5]*8;
		VGAb=BACK2q[4:0]*8;
	end

	if(yPixel>=BACK1Y && yPixel<BACK1Y+(98*5) && xPixel>=BACK1X+1 && xPixel<BACK1X+(130*5-BACK1SKIPX) && BACK1q[15]==1'b1)
	begin
		VGAr=BACK1q[14:10]*8;
		VGAg=BACK1q[9:5]*8;
		VGAb=BACK1q[4:0]*8;
	end

	if(PIPEDOWN1VISIBLE && yPixel>=PIPEDOWN1Y && yPixel<PIPEDOWN1Y+(201*2) && xPixel>=PIPEDOWN1X+1 && xPixel<PIPEDOWN1X+(33*2) && PIPEDOWN1q[15]==1'b1)
	begin
		VGAr=PIPEDOWN1q[14:10]*8;
		VGAg=PIPEDOWN1q[9:5]*8;
		VGAb=PIPEDOWN1q[4:0]*8;
	end

	if(PIPEDOWN2VISIBLE && yPixel>=PIPEDOWN2Y && yPixel<PIPEDOWN2Y+(201*2) && xPixel>=PIPEDOWN2X+1 && xPixel<PIPEDOWN2X+(33*2) && PIPEDOWN2q[15]==1'b1)
	begin
		VGAr=PIPEDOWN2q[14:10]*8;
		VGAg=PIPEDOWN2q[9:5]*8;
		VGAb=PIPEDOWN2q[4:0]*8;
	end

	if(PIPEDOWN3VISIBLE && yPixel>=PIPEDOWN3Y && yPixel<PIPEDOWN3Y+(201*2) && xPixel>=PIPEDOWN3X+1 && xPixel<PIPEDOWN3X+(33*2) && PIPEDOWN3q[15]==1'b1)
	begin
		VGAr=PIPEDOWN3q[14:10]*8;
		VGAg=PIPEDOWN3q[9:5]*8;
		VGAb=PIPEDOWN3q[4:0]*8;
	end

	if(yPixel>=pointY && yPixel<pointY+(48*1) && xPixel>=pointX+1 && xPixel<pointX+(32*1) && pointq[15]==1'b1)
	begin
		VGAr=pointq[14:10]*8;
		VGAg=pointq[9:5]*8;
		VGAb=pointq[4:0]*8;
	end

	if(PIPEUP1VISIBLE && yPixel>=PIPEUP1Y && yPixel<PIPEUP1Y+(201*2)-PIPEUP1SKIPY && xPixel>=PIPEUP1X+1 && xPixel<PIPEUP1X+(33*2) && PIPEUP1q[15]==1'b1)
	begin
		VGAr=PIPEUP1q[14:10]*8;
		VGAg=PIPEUP1q[9:5]*8;
		VGAb=PIPEUP1q[4:0]*8;
	end

	if(PIPEUP2VISIBLE && yPixel>=PIPEUP2Y && yPixel<PIPEUP2Y+(201*2)-PIPEUP2SKIPY && xPixel>=PIPEUP2X+1 && xPixel<PIPEUP2X+(33*2) && PIPEUP2q[15]==1'b1)
	begin
		VGAr=PIPEUP2q[14:10]*8;
		VGAg=PIPEUP2q[9:5]*8;
		VGAb=PIPEUP2q[4:0]*8;
	end

	if(PIPEUP3VISIBLE && yPixel>=PIPEUP3Y && yPixel<PIPEUP3Y+(201*2)-PIPEUP3SKIPY && xPixel>=PIPEUP3X+1 && xPixel<PIPEUP3X+(33*2) && PIPEUP3q[15]==1'b1)
	begin
		VGAr=PIPEUP3q[14:10]*8;
		VGAg=PIPEUP3q[9:5]*8;
		VGAb=PIPEUP3q[4:0]*8;
	end

	if(yPixel>=cloud2Y && yPixel<cloud2Y+(33*1) && xPixel>=cloud2X+1 && xPixel<cloud2X+(31*1) && cloud2q[15]==1'b1)
	begin
		VGAr=cloud2q[14:10]*8;
		VGAg=cloud2q[9:5]*8;
		VGAb=cloud2q[4:0]*8;
	end

	if(yPixel>=cloud3Y && yPixel<cloud3Y+(33*1) && xPixel>=cloud3X+1 && xPixel<cloud3X+(31*1) && cloud3q[15]==1'b1)
	begin
		VGAr=cloud3q[14:10]*8;
		VGAg=cloud3q[9:5]*8;
		VGAb=cloud3q[4:0]*8;
	end

	//Drawing Solid shape "LEFTBOX"
	if(xPixel>=0 && xPixel<=73 && yPixel>=0 && yPixel<=480)
	begin
		VGAr = 8'b00101111;
		VGAg = 8'b01010101;
		VGAb = 8'b10010111;
		if(xPixel<3 || xPixel>70 || yPixel<3 || yPixel>477)    //Drawing border
		begin
			VGAr = 8'b00100010;
			VGAg = 8'b00101010;
			VGAb = 8'b00110101;
		end
	end

	if(yPixel>=cloud1Y && yPixel<cloud1Y+(33*1) && xPixel>=cloud1X+1 && xPixel<cloud1X+(31*1) && cloud1q[15]==1'b1)
	begin
		VGAr=cloud1q[14:10]*8;
		VGAg=cloud1q[9:5]*8;
		VGAb=cloud1q[4:0]*8;
	end

	if(yPixel>=birdY && yPixel<birdY+(62*1) && xPixel>=birdX+1 && xPixel<birdX+(79*1) && birdq[15]==1'b1)
	begin
		VGAr=birdq[14:10]*8;
		VGAg=birdq[9:5]*8;
		VGAb=birdq[4:0]*8;
	end

end

wire [9:0]cloud2X;
wire [9:0]cloud2Y;
wire [9:0]cloud3X;
wire [9:0]cloud3Y;
wire [9:0]cloud1X;
wire [9:0]cloud1Y;
wire [9:0]PIPEDOWN1VISIBLE;
wire [9:0]PIPEDOWN2VISIBLE;
wire [9:0]PIPEDOWN3VISIBLE;
wire [9:0]PIPEUP1SKIPY;
wire [9:0]PIPEUP1VISIBLE;
wire [9:0]PIPEUP2SKIPY;
wire [9:0]PIPEUP2VISIBLE;
wire [9:0]PIPEUP3SKIPY;
wire [9:0]PIPEUP3VISIBLE;
wire [9:0]cloud1sp;
wire [9:0]birdsp;
wire [9:0]BACK2SKIPX;
wire [9:0]BACK1SKIPX;


animations anim1(animationCLOCK,reset,wasd,arrows,cloud2X,cloud2Y,cloud3X,cloud3Y,cloud1X,cloud1Y,);
collsMod mod(coltuberias,PIPEDOWN1X,PIPEDOWN1Y,PIPEDOWN2X,PIPEDOWN2Y,PIPEDOWN3X,PIPEDOWN3Y,PIPEUP1X,PIPEUP1Y,PIPEUP2X,PIPEUP2Y,PIPEUP3X,PIPEUP3Y,birdX,birdY);
wire [15:0]BACK2q;
ramBACK2 BACK2ram((((yPixel-BACK2Y+BACK2SKIPY)/5)*(128) +(((xPixel-BACK2X)/5))+(BACK2SKIPX/5)+((128)*(BACK2sp))),CLOCK,16'd0,0,BACK2q);
wire [15:0]BACK1q;
ramBACK1 BACK1ram((((yPixel-BACK1Y+BACK1SKIPY)/5)*(130) +(((xPixel-BACK1X)/5))+(BACK1SKIPX/5)+((130)*(BACK1sp))),CLOCK,16'd0,0,BACK1q);
wire [15:0]PIPEDOWN1q;
ramPIPEDOWN1 PIPEDOWN1ram((((yPixel-PIPEDOWN1Y+PIPEDOWN1SKIPY)/2)*(33) +(((xPixel-PIPEDOWN1X)/2))+(PIPEDOWN1SKIPX/2)+((33)*(PIPEDOWN1sp))),CLOCK,16'd0,0,PIPEDOWN1q);
wire [15:0]PIPEDOWN2q;
ramPIPEDOWN2 PIPEDOWN2ram((((yPixel-PIPEDOWN2Y+PIPEDOWN2SKIPY)/2)*(33) +(((xPixel-PIPEDOWN2X)/2))+(PIPEDOWN2SKIPX/2)+((33)*(PIPEDOWN2sp))),CLOCK,16'd0,0,PIPEDOWN2q);
wire [15:0]PIPEDOWN3q;
ramPIPEDOWN3 PIPEDOWN3ram((((yPixel-PIPEDOWN3Y+PIPEDOWN3SKIPY)/2)*(33) +(((xPixel-PIPEDOWN3X)/2))+(PIPEDOWN3SKIPX/2)+((33)*(PIPEDOWN3sp))),CLOCK,16'd0,0,PIPEDOWN3q);
wire [15:0]pointq;
rampoint pointram((((yPixel-pointY+pointSKIPY)/1)*(32) +(((xPixel-pointX)/1))+(pointSKIPX/1)+((32)*(pointsp))),CLOCK,16'd0,0,pointq);
wire [15:0]PIPEUP1q;
ramPIPEUP1 PIPEUP1ram((((yPixel-PIPEUP1Y+PIPEUP1SKIPY)/2)*(33) +(((xPixel-PIPEUP1X)/2))+(PIPEUP1SKIPX/2)+((33)*(PIPEUP1sp))),CLOCK,16'd0,0,PIPEUP1q);
wire [15:0]PIPEUP2q;
ramPIPEUP2 PIPEUP2ram((((yPixel-PIPEUP2Y+PIPEUP2SKIPY)/2)*(33) +(((xPixel-PIPEUP2X)/2))+(PIPEUP2SKIPX/2)+((33)*(PIPEUP2sp))),CLOCK,16'd0,0,PIPEUP2q);
wire [15:0]PIPEUP3q;
ramPIPEUP3 PIPEUP3ram((((yPixel-PIPEUP3Y+PIPEUP3SKIPY)/2)*(33) +(((xPixel-PIPEUP3X)/2))+(PIPEUP3SKIPX/2)+((33)*(PIPEUP3sp))),CLOCK,16'd0,0,PIPEUP3q);
wire [15:0]cloud2q;
ramcloud2 cloud2ram((((yPixel-cloud2Y+cloud2SKIPY)/1)*(31) +(((xPixel-cloud2X)/1))+(cloud2SKIPX/1)+((31)*(cloud2sp))),CLOCK,16'd0,0,cloud2q);
wire [15:0]cloud3q;
ramcloud3 cloud3ram((((yPixel-cloud3Y+cloud3SKIPY)/1)*(31) +(((xPixel-cloud3X)/1))+(cloud3SKIPX/1)+((31)*(cloud3sp))),CLOCK,16'd0,0,cloud3q);
wire [15:0]cloud1q;
ramcloud1 cloud1ram((((yPixel-cloud1Y+cloud1SKIPY)/1)*(93) +(((xPixel-cloud1X)/1))+(cloud1SKIPX/1)+((31)*(cloud1sp))),CLOCK,16'd0,0,cloud1q);
wire [15:0]birdq;
rambird birdram((((yPixel-birdY+birdSKIPY)/1)*(952) +(((xPixel-birdX)/1))+(birdSKIPX/1)+((79)*(birdsp))),CLOCK,16'd0,0,birdq);

endmodule

module animations(animationCLOCK,reset,wasd,arrows,cloud2X,cloud2Y,cloud3X,cloud3Y,cloud1X,cloud1Y,);

input reset;
output [9:0]cloud2X;
reg [9:0]cloud2X;
reg cloud2XDir;
output [9:0]cloud2Y;
reg [9:0]cloud2Y;
reg cloud2YDir;
output [9:0]cloud3X;
reg [9:0]cloud3X;
reg cloud3XDir;
output [9:0]cloud3Y;
reg [9:0]cloud3Y;
reg cloud3YDir;
output [9:0]cloud1X;
reg [9:0]cloud1X;
reg cloud1XDir;
output [9:0]cloud1Y;
reg [9:0]cloud1Y;
reg cloud1YDir;
input animationCLOCK;
input [3:0]arrows;
input [3:0]wasd;
reg initilized;

initial begin
	cloud2X=353;
	cloud2Y=166;
	cloud3X=466;
	cloud3Y=99;
	cloud1X=181;
	cloud1Y=42;
end


always @ (posedge animationCLOCK)
begin


	//Writing Bouncing movement for cloud2X:
	if(cloud2XDir==1)
	begin
		if (cloud2X >= 580 - 31)
		begin
			cloud2XDir = 0;
		end
		else
		begin
			cloud2X <= cloud2X + 3;
		end
	end
	else
	begin
		if (cloud2X <= 125)
		begin
			cloud2XDir = 1;
		end
		else
		begin
			cloud2X <= cloud2X - 3;
		end
	end
	if(cloud2YDir==1)
	begin
		if (cloud2Y >= 150 - 33)
		begin
			cloud2YDir = 0;
		end
		else
		begin
			cloud2Y <= cloud2Y + 3;
		end
	end
	else
	begin
		if (cloud2Y <= 40)
		begin
			cloud2YDir = 1;
		end
		else
		begin
			cloud2Y <= cloud2Y - 3;
		end
	end
	//Writing Bouncing movement for cloud3X:
	if(cloud3XDir==1)
	begin
		if (cloud3X >= 600 - 31)
		begin
			cloud3XDir = 0;
		end
		else
		begin
			cloud3X <= cloud3X + 5;
		end
	end
	else
	begin
		if (cloud3X <= 115)
		begin
			cloud3XDir = 1;
		end
		else
		begin
			cloud3X <= cloud3X - 5;
		end
	end
	if(cloud3YDir==1)
	begin
		if (cloud3Y >= 180 - 33)
		begin
			cloud3YDir = 0;
		end
		else
		begin
			cloud3Y <= cloud3Y + 5;
		end
	end
	else
	begin
		if (cloud3Y <= 70)
		begin
			cloud3YDir = 1;
		end
		else
		begin
			cloud3Y <= cloud3Y - 5;
		end
	end
	//Writing Bouncing movement for cloud1X:
	if(cloud1XDir==1)
	begin
		if (cloud1X >= 510 - 31)
		begin
			cloud1XDir = 0;
		end
		else
		begin
			cloud1X <= cloud1X + 1;
		end
	end
	else
	begin
		if (cloud1X <= 225)
		begin
			cloud1XDir = 1;
		end
		else
		begin
			cloud1X <= cloud1X - 1;
		end
	end
	if(cloud1YDir==1)
	begin
		if (cloud1Y >= 120 - 33)
		begin
			cloud1YDir = 0;
		end
		else
		begin
			cloud1Y <= cloud1Y + 1;
		end
	end
	else
	begin
		if (cloud1Y <= 20)
		begin
			cloud1YDir = 1;
		end
		else
		begin
			cloud1Y <= cloud1Y - 1;
		end
	end
end

endmodule
module collsMod(coltuberias,PIPEDOWN1X,PIPEDOWN1Y,PIPEDOWN2X,PIPEDOWN2Y,PIPEDOWN3X,PIPEDOWN3Y,PIPEUP1X,PIPEUP1Y,PIPEUP2X,PIPEUP2Y,PIPEUP3X,PIPEUP3Y,birdX,birdY);
	output coltuberias;
	input [9:0]PIPEDOWN1X;
	input [9:0]PIPEDOWN1Y;
	input [9:0]PIPEDOWN2X;
	input [9:0]PIPEDOWN2Y;
	input [9:0]PIPEDOWN3X;
	input [9:0]PIPEDOWN3Y;
	input [9:0]PIPEUP1X;
	input [9:0]PIPEUP1Y;
	input [9:0]PIPEUP2X;
	input [9:0]PIPEUP2Y;
	input [9:0]PIPEUP3X;
	input [9:0]PIPEUP3Y;
	input [9:0]birdX;
	input [9:0]birdY;
	assign coltuberias=((birdY+5>PIPEDOWN1Y) && (birdY<PIPEDOWN1Y+402) && (birdX+79>PIPEDOWN1X) && (birdX<PIPEDOWN1X+67))||((birdY+5>PIPEDOWN2Y) && (birdY<PIPEDOWN2Y+402) && (birdX+79>PIPEDOWN2X) && (birdX<PIPEDOWN2X+67))||((birdY+5>PIPEDOWN3Y) && (birdY<PIPEDOWN3Y+402) && (birdX+79>PIPEDOWN3X) && (birdX<PIPEDOWN3X+67))||((birdY+5>PIPEUP1Y) && (birdY<PIPEUP1Y+402) && (birdX+79>PIPEUP1X) && (birdX<PIPEUP1X+67))||((birdY+5>PIPEUP2Y) && (birdY<PIPEUP2Y+402) && (birdX+79>PIPEUP2X) && (birdX<PIPEUP2X+67))||((birdY+5>PIPEUP3Y) && (birdY<PIPEUP3Y+402) && (birdX+79>PIPEUP3X) && (birdX<PIPEUP3X+67));
endmodule
